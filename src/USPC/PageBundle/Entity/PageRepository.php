<?php

namespace USPC\PageBundle\Entity;

use AppBundle\Entity\Coupon;
use Doctrine\ORM\EntityRepository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends EntityRepository
{
    /**
     * Mark all unused object urls as alias
     *
     * @param  string  $type
     * @param  object  $obj
     * @return void
     * @author Mykola Martynov
     **/
    public function makeAliasUrl($type, $obj)
    {
        if (!$this->isValidObject($obj)) {
            return;
        }

        $em = $this->getEntityManager();
        $query_params = [
                'type' => $type,
                'object_id' => $obj->getId(),
                'url' => $obj->getUrl(),
            ];

        # mark all urls with given {type,object_id}
        $query = $em
            ->createQuery(
                'UPDATE AppBundle:Page p '
                . 'SET p.is_alias = true '
                . 'WHERE p.type = :type and p.object_id = :object_id and p.url != :url'
            )
            ->setParameters($query_params);
        $query->execute();

        # clear for the current object url
        $query = $em
            ->createquery(
                'UPDATE AppBundle:Page p '
                . 'SET p.is_alias = false '
                . 'WHERE p.type = :type AND p.object_id = :object_id and p.url = :url'
            )
            ->setParameters($query_params);
    }

    /**
     * Find page with given object url.
     *
     * @param  string  $type
     * @param  object  $obj
     * @return null|Page
     * @author Mykola Martynov
     **/
    public function findObject($type, $obj)
    {
        if (!$this->isValidObject($obj)) {
            return;
        }

        $page = $this->findOneBy([
                'type' => $type,
                'url' => $obj->getUrl(),
                'object_id' => $obj->getId(),
            ]);

        return $page;
    }

    /**
     * Return true if given object valid to get id/url
     *
     * @return boolean
     * @author Mykola Martynov
     **/
    private function isValidObject($obj)
    {
        return is_object($obj) && method_exists($obj, 'getId') && method_exists($obj, 'getUrl');
    }

    /**
     * Delete all associated urls with the given object
     *
     * @param  string  $type
     * @param  object  $obj
     * @return void
     * @author Mykola Martynov
     **/
    public function deletePageUrls($type, $obj)
    {
        if (!$this->isValidObject($obj)) {
            return;
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'DELETE FROM AppBundle:Page p '
                . 'WHERE p.type = :type and p.object_id = :object_id'
            )
            ->setParameters([
                'type' => $type,
                'object_id' => $obj->getId(),
            ]);
        $query->execute();
    }
}
