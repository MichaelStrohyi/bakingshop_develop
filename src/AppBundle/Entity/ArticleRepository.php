<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    /**
     * Return list aff all article (_homepage included) ordered by header
     *
     * @return array
     * @author Michael Strohyi
     **/
    public function findAllByHeader($with_homepage = false)
    {
        if ($with_homepage) {
            return $this->findBy([], ['header' => 'asc']);
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM AppBundle:Article a '
                . 'WHERE a.id != 0 '
                . 'ORDER by a.header ASC'
            );
            
        return $query->getResult();
    }

    /**
     * Return article used for homepage
     *
     * @return Article
     * @author Mykola Martynov
     **/
    public function getHomepage()
    {
        $query = $this->getEntityManager()->createQuery(
                'SELECT a FROM AppBundle:Article a '
                . 'WHERE a.is_homepage = true '
                . 'AND a.id != 0'
            );

        return $query->getOneOrNullResult();
    }

    /**
     * Clear homepage flag for other
     *
     * @param  Article  $article
     * 
     * @return void
     * @author Mykola Martynov
     **/
    public function resetHomepage(Article $article)
    {
        $entity_manager = $this->getEntityManager();

        $query = $entity_manager
            ->createQuery(
                'UPDATE AppBundle:Article a '
                . 'SET a.is_homepage = false '
                . 'WHERE a.is_homepage = true '
                . 'AND a.id <> :id'
            )
            ->setParameters([
                    'id' => $article->getId(),
                ]);
        $query->execute();
    }

    /**
     * Get current url for $article from db
     *
     * @param Article $article
     *
     * @return string|null
     * @author Michael Strohyi
     **/
    public function getUrlFromDB($article)
    {
        if (empty($article->getId())) {
            return;
        }
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a.url FROM AppBundle:Article a '
                . 'WHERE a.id = :id'
            )
            ->setParameters([
                'id' => $article->getId(),
            ]);

        return $this->getEntityManager()->getRepository('USPCPageBundle:Page')->getUrlFromRes($query->getOneOrNullResult()['url']);
    }

    /**
     * Return list off all articles with given $type ordered by header
     *
     * @return array
     * @author Michael Strohyi
     **/
    public function findAllByType($type)
    {
        $query = $this->getEntityManager()->createQuery(
                'SELECT a FROM AppBundle:Article a '
                . 'WHERE a.type = :type '
                . 'AND a.id != 0'
            )
            ->setParameters([
                'type' => $type,
            ]);

        return $query->getResult();
    }

    /**
     * Return list off all articles, which have $subname in header
     *
     * @param string $subname
     * @param int $limit
     * @return array
     * @author Michael Strohyi
     **/
    public function findBySubname($subname, $limit = null)
    {   
        # if length of search-string (subname) is < 2 return empty result
        if (strlen($subname) < 2) {
            return [];
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM AppBundle:Article a '
                . 'WHERE a.header LIKE :subname '
                . 'AND a.type != :type '
                . 'AND a.id != 0 '
                . 'ORDER by a.header ASC'
            )
            ->setParameters([
                'subname' => '%' . $subname . '%',
                'type' => Article::PAGE_SUBTYPE_INFO,
            ])
            ->setMaxResults($limit);
            
        return $query->getResult();
    }

    /**
     * Return list off all articles, which have $filename in body
     *
     * @param string $filename
     * @param int $limit
     * @return array
     * @author Michael Strohyi
     **/
    public function isFileUsed($filename)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a.header FROM AppBundle:Article a '
                . 'WHERE a.body LIKE :filename '
                . 'AND a.id != 0'
            )
            ->setParameters([
                'filename' => '%' . $filename . '%',
            ]);

        return !empty($query->getResult());
    }

    /**
     * Return list off all articles, which have $url in prodBody
     *
     * @param string $url
     * @return array
     * @author Michael Strohyi
     **/
    public function findByUsedRedirect($url)
    {
        if (empty($url)) {
            return [];
        }

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT a FROM AppBundle:Article a '
                . 'WHERE a.body LIKE :url'
                . 'AND a.id != 0'
            )
            ->setParameters([
                'url' => '%' . $url . '%'
            ]);

        $res = [];
        foreach ($query->getResult() as $article) {
            $res[$article->getId()] = $article;
        }

        return $res;
    }

    /**
     * Return list aff all article (_homepage included) ordered by header
     *
     * @return Article
     * @author Michael Strohyi
     **/
    public function getHomepageInfo()
    {
        return $this->findOneBy(['id' => 0]);
    }
}
